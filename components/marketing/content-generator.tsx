
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { 
  Wand2, 
  Copy, 
  Download, 
  RefreshCw,
  Sparkles,
  FileText,
  Image,
  Mail,
  Globe,
  Video,
  MessageSquare,
  Settings,
  Loader2
} from 'lucide-react'

interface GeneratedContent {
  id: string
  type: string
  title: string
  content: string
  keywords: string[]
  tone: string
  platform: string
  createdAt: string
}

export function ContentGenerator() {
  const [prompt, setPrompt] = useState('')
  const [selectedType, setSelectedType] = useState('blog-post')
  const [selectedTone, setSelectedTone] = useState('professional')
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null)

  const contentTypes = [
    { id: 'blog-post', label: '–°—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞', icon: FileText },
    { id: 'social-post', label: '–ü–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏', icon: MessageSquare },
    { id: 'email', label: 'Email —Ä–∞—Å—Å—ã–ª–∫–∞', icon: Mail },
    { id: 'landing-page', label: '–õ–µ–Ω–¥–∏–Ω–≥', icon: Globe },
    { id: 'ad-copy', label: '–†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç', icon: Sparkles },
    { id: 'video-script', label: '–°—Ü–µ–Ω–∞—Ä–∏–π –≤–∏–¥–µ–æ', icon: Video }
  ]

  const tones = [
    { id: 'professional', label: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π' },
    { id: 'friendly', label: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π' },
    { id: 'confident', label: '–£–≤–µ—Ä–µ–Ω–Ω—ã–π' },
    { id: 'casual', label: '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π' },
    { id: 'urgent', label: '–°—Ä–æ—á–Ω—ã–π' },
    { id: 'inspiring', label: '–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π' }
  ]

  const platforms = [
    'LinkedIn', 'Facebook', 'Instagram', 'Twitter', 'Telegram', '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', 'YouTube', 'Email'
  ]

  const handleGenerate = async () => {
    if (!prompt.trim()) return

    setIsGenerating(true)
    
    // –°–∏–º—É–ª—è—Ü–∏—è IA –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    setTimeout(() => {
      const mockContent: GeneratedContent = {
        id: Date.now().toString(),
        type: selectedType,
        title: getTypeLabel(selectedType),
        content: generateMockContent(selectedType, prompt),
        keywords: extractKeywords(prompt),
        tone: selectedTone,
        platform: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π',
        createdAt: new Date().toISOString()
      }
      
      setGeneratedContent(mockContent)
      setIsGenerating(false)
    }, 2000)
  }

  const getTypeLabel = (type: string) => {
    return contentTypes.find(t => t.id === type)?.label || type
  }

  const generateMockContent = (type: string, prompt: string) => {
    const contents = {
      'blog-post': `# ${prompt}

–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ –±–∏–∑–Ω–µ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–æ—Ä–æ–º —É—Å–ø–µ—Ö–∞. –ö–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–Ω–µ–¥—Ä—è—é—Ç AI-—Ä–µ—à–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ 30-40%.

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:

‚Ä¢ **–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏** - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ **–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏** - —Å–Ω–∏–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫  
‚Ä¢ **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –±–µ–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è

–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ AI –æ–∫—É–ø–∞—é—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ 6-12 –º–µ—Å—è—Ü–µ–≤.

**–ó–∞–∫–ª—é—á–µ–Ω–∏–µ:** –ë—É–¥—É—â–µ–µ –∑–∞ –∫–æ–º–ø–∞–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤–Ω–µ–¥—Ä—è—é—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.`,

      'social-post': `üöÄ ${prompt}

–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏:
‚úÖ –≠–∫–æ–Ω–æ–º—è—Ç –¥–æ 40% —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –°–Ω–∏–∂–∞—é—Ç –æ—à–∏–±–∫–∏ –Ω–∞ 60%
‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –ø—Ä–∏–±—ã–ª—å –Ω–∞ 25%

üí° –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –≤ –Ω–µ–¥–µ–ª—é!

#–±–∏–∑–Ω–µ—Å #–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è #AI #—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,

      'email': `–¢–µ–º–∞: ${prompt} - —É–≤–µ–ª–∏—á—å—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 40%

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 40% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, –∞ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –º–∏–Ω–∏–º—É–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.

–≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

**–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –£–º–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–ì–æ—Ç–æ–≤—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é?

[–ü–æ–ª—É—á–∏—Ç—å –¥–µ–º–æ-–¥–æ—Å—Ç—É–ø]

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ ApexMind`
    }

    return contents[type as keyof typeof contents] || '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...'
  }

  const extractKeywords = (text: string) => {
    const words = text.toLowerCase().split(' ')
    return words.filter(word => word.length > 3).slice(0, 5)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
  }

  return (
    <div className="space-y-6">
      {/* Content Generation Form */}
      <Card className="card-hover">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5 text-secondary" />
            IA –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          </CardTitle>
          <CardDescription>
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ª—é–±—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ü–µ–ª–µ–π
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Content Type Selection */}
          <div className="space-y-3">
            <label className="text-sm font-medium">–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞</label>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
              {contentTypes.map((type) => (
                <Button
                  key={type.id}
                  variant={selectedType === type.id ? "default" : "outline"}
                  className="justify-start gap-2 h-auto p-3"
                  onClick={() => setSelectedType(type.id)}
                >
                  <type.icon className="h-4 w-4" />
                  <span className="text-xs">{type.label}</span>
                </Button>
              ))}
            </div>
          </div>

          {/* Tone Selection */}
          <div className="space-y-3">
            <label className="text-sm font-medium">–¢–æ–Ω –æ–±—â–µ–Ω–∏—è</label>
            <div className="flex flex-wrap gap-2">
              {tones.map((tone) => (
                <Button
                  key={tone.id}
                  variant={selectedTone === tone.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedTone(tone.id)}
                  className="text-xs"
                >
                  {tone.label}
                </Button>
              ))}
            </div>
          </div>

          {/* Prompt Input */}
          <div className="space-y-3">
            <label htmlFor="prompt" className="text-sm font-medium">
              –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            </label>
            <div className="space-y-2">
              <Input
                id="prompt"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ç—å—è –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –º–∞–ª—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                className="text-sm"
              />
              <div className="flex flex-wrap gap-1">
                {['–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ AI', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤', '—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞'].map((suggestion) => (
                  <Button
                    key={suggestion}
                    variant="ghost"
                    size="sm"
                    onClick={() => setPrompt(suggestion)}
                    className="text-xs h-6"
                  >
                    {suggestion}
                  </Button>
                ))}
              </div>
            </div>
          </div>

          {/* Generate Button */}
          <Button 
            onClick={handleGenerate}
            disabled={!prompt.trim() || isGenerating}
            className="w-full"
          >
            {isGenerating ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...
              </>
            ) : (
              <>
                <Sparkles className="h-4 w-4 mr-2" />
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Generated Content */}
      {generatedContent && (
        <Card className="card-hover">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5 text-secondary" />
                  {generatedContent.title}
                </CardTitle>
                <CardDescription>
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {new Date(generatedContent.createdAt).toLocaleString('ru-RU')}
                </CardDescription>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm" onClick={() => copyToClipboard(generatedContent.content)}>
                  <Copy className="h-4 w-4" />
                </Button>
                <Button variant="outline" size="sm">
                  <Download className="h-4 w-4" />
                </Button>
                <Button variant="outline" size="sm" onClick={handleGenerate}>
                  <RefreshCw className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Content Preview */}
            <div className="bg-muted/50 rounded-lg p-4">
              <pre className="whitespace-pre-wrap text-sm font-mono">
                {generatedContent.content}
              </pre>
            </div>

            {/* Content Metadata */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t">
              <div>
                <label className="text-xs font-medium text-muted-foreground">–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê</label>
                <div className="flex flex-wrap gap-1 mt-1">
                  {generatedContent.keywords.map((keyword, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {keyword}
                    </Badge>
                  ))}
                </div>
              </div>
              
              <div>
                <label className="text-xs font-medium text-muted-foreground">–¢–û–ù</label>
                <p className="text-sm mt-1">{tones.find(t => t.id === generatedContent.tone)?.label}</p>
              </div>
              
              <div>
                <label className="text-xs font-medium text-muted-foreground">–ü–õ–ê–¢–§–û–†–ú–ê</label>
                <p className="text-sm mt-1">{generatedContent.platform}</p>
              </div>
            </div>

            {/* Actions */}
            <div className="flex justify-between pt-4 border-t">
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Settings className="h-4 w-4 mr-2" />
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Button variant="outline" size="sm">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–∞–º–ø–∞–Ω–∏—é
                </Button>
              </div>
              <Button>
                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
